"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const os_locale_1 = __importDefault(require("os-locale"));
const meow_1 = __importDefault(require("meow"));
const params_1 = require("./params");
const lang_1 = require("./lang");
const messages_1 = require("./messages");
const index_1 = require("./index");
const { HTTP_PROXY, HTTPS_PROXY, KINTONE_BASE_URL, KINTONE_USERNAME, KINTONE_PASSWORD, KINTONE_BASIC_AUTH_USERNAME, KINTONE_BASIC_AUTH_PASSWORD, } = process.env;
const cli = (0, meow_1.default)(`
  Usage
    $ kintone-plugin-uploader <pluginPath>
  Options
    --base-url Base-url of your kintone
    --username Login username
    --password User's password
    --proxy Proxy server
    --basic-auth-username username for Basic Authentication
    --basic-auth-password password for Basic Authentication
    --watch Watch the changes of plugin zip and re-run
    --waiting-dialog-ms The waiting time for showing the input dialog in milliseconds
    --lang Using language (en or ja)
    --puppeteer-ignore-default-args Ignore default arguments of puppeteer

    You can set the values through environment variables
    base-url: KINTONE_BASE_URL
    username: KINTONE_USERNAME
    password: KINTONE_PASSWORD
    basic-auth-username: KINTONE_BASIC_AUTH_USERNAME
    basic-auth-password: KINTONE_BASIC_AUTH_PASSWORD
    proxy: HTTPS_PROXY or HTTP_PROXY
`, {
    flags: {
        baseUrl: {
            type: "string",
            default: KINTONE_BASE_URL || "",
        },
        username: {
            type: "string",
            default: KINTONE_USERNAME || "",
        },
        password: {
            type: "string",
            default: KINTONE_PASSWORD || "",
        },
        proxy: {
            type: "string",
            default: HTTPS_PROXY || HTTP_PROXY || "",
        },
        basicAuthUsername: {
            type: "string",
            default: KINTONE_BASIC_AUTH_USERNAME || "",
        },
        basicAuthPassword: {
            type: "string",
            default: KINTONE_BASIC_AUTH_PASSWORD || "",
        },
        watch: {
            type: "boolean",
            default: false,
        },
        waitingDialogMs: {
            type: "number",
            default: 0,
        },
        lang: {
            type: "string",
            default: (0, lang_1.getDefaultLang)(os_locale_1.default.sync()),
        },
        puppeteerIgnoreDefaultArgs: {
            type: "string",
        },
    },
});
const pluginPath = cli.input[0];
const { username, password, baseUrl, proxy, basicAuthUsername, basicAuthPassword, watch, waitingDialogMs, lang, puppeteerIgnoreDefaultArgs, } = cli.flags;
const isLang = (_lang) => {
    return ["ja", "en"].includes(_lang);
};
if (!isLang(lang)) {
    throw new Error((0, messages_1.getMessage)((0, lang_1.getDefaultLang)(os_locale_1.default.sync()), "Error_invalidLang"));
}
const basicAuth = basicAuthUsername !== "" && basicAuthPassword !== ""
    ? {
        username: basicAuthUsername,
        password: basicAuthPassword,
    }
    : undefined;
const options = {
    watch,
    lang,
    proxyServer: proxy !== "" ? proxy : undefined,
    basicAuth,
    puppeteerIgnoreDefaultArgs: puppeteerIgnoreDefaultArgs === null || puppeteerIgnoreDefaultArgs === void 0 ? void 0 : puppeteerIgnoreDefaultArgs.split(" "),
};
if (!pluginPath) {
    console.error((0, messages_1.getMessage)(lang, "Error_requiredZipPath"));
    cli.showHelp();
}
const wait = (ms) => new Promise((r) => setTimeout(r, ms));
wait(waitingDialogMs)
    .then(() => (0, params_1.inquireParams)({ username, password, baseUrl, lang }))
    .then((answers) => {
    (0, index_1.run)(answers.baseUrl, answers.username, answers.password, pluginPath, options);
});
//# sourceMappingURL=cli.js.map